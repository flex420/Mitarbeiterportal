name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Resolve image name
        id: vars
        env:
          DOCKERHUB_REPOSITORY: ${{ secrets.DOCKERHUB_REPOSITORY }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          if [ "$EVENT_NAME" = "push" ]; then
            if [ -z "$DOCKERHUB_USERNAME" ] || [ -z "$DOCKERHUB_TOKEN" ]; then
              echo "Docker Hub credentials are required on push events" >&2
              exit 1
            fi
          fi

          if [ -n "$DOCKERHUB_REPOSITORY" ]; then
            IMAGE="$DOCKERHUB_REPOSITORY"
          elif [ -n "$DOCKERHUB_USERNAME" ]; then
            IMAGE="$DOCKERHUB_USERNAME/mitarbeiterportal"
          else
            IMAGE="local/mitarbeiterportal"
          fi

          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: Log in to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels)
        if: github.event_name == 'push'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ steps.vars.outputs.image }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha

      - name: Build image (PR verification)
        if: github.event_name != 'push'
        run: docker build --file Dockerfile --tag ${{ steps.vars.outputs.image }}:pr-${{ github.run_number }} .

      - name: Build and push image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=docker.io/${{ steps.vars.outputs.image }}:buildcache
          cache-to: type=registry,ref=docker.io/${{ steps.vars.outputs.image }}:buildcache,mode=max
